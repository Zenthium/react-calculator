{"version":3,"sources":["contexts/CalculatorContext.jsx","components/CalculatorComponents/Display.jsx","components/CalculatorComponents/Controls/Button/Button.jsx","components/CalculatorComponents/Controls/Controls.jsx","components/Calculator.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CalculatorContext","createContext","CalculatorContextProvider","state","currentFormula","resultArray","addToFormula","op","setState","prevState","clearFormula","setCurrentFormula","value","evaluateFormula","eval","Provider","this","props","children","Component","Display","useContext","className","Button","buttonName","buttonOperator","buttonClear","buttonZero","onClick","event","target","id","Controls","buttons","require","console","log","map","button","name","isOperatorButton","isClearButton","isZeroButton","Calculator","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w/CAEaA,kBAAoBC,2DAE3BC,0B,82BACJC,MAAQ,CACNC,eAAgB,GAChBC,YAAa,I,MAGfC,aAAe,SAACC,GACd,MAAKC,UAAS,SAAAC,GACZ,MAAO,CAACL,eAAgBK,EAAUL,eAAiBG,O,MAIvDG,aAAe,WACb,MAAKF,SAAS,CACZJ,eAAgB,M,MAIpBO,kBAAoB,SAACC,GACnB,MAAKJ,SAAS,CACZJ,eAAgBQ,K,MAIpBC,gBAAkB,WAChB,MAAKL,UAAS,SAAAC,WACZ,MAAO,CAACL,eAAgBU,KAAKL,UAAUL,qB,ocAIzC,OACE,2DAACJ,kBAAkBe,SAAnB,CAA4BH,MAAK,kLAAMI,KAAKb,MAAX,CAAkBG,aAAcU,KAAKV,aAAcI,aAAaM,KAAKN,aAAcG,gBAAiBG,KAAKH,mBACvIG,KAAKC,MAAMC,c,2BAhCoBC,8CAsCzBjB,iD,2sBC7BAkB,EATC,WAAO,IACbhB,EAAmBiB,qBAAWrB,KAA9BI,eACR,OACE,yBAAKkB,UAAU,WACb,2BAAIlB,KCqCKmB,G,YAzCA,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,WAAYC,EAA8C,EAA9CA,eAAgBC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAAiB,EAClBN,qBACtDrB,KADMM,EADkE,EAClEA,aAAcI,EADoD,EACpDA,aAAcG,EADsC,EACtCA,gBA6BpC,OACE,yBACEe,QAjBgB,SAAAC,GACM,MAApBA,EAAMC,OAAOC,IAAkC,MAApBF,EAAMC,OAAOC,KAClB,SAApBF,EAAMC,OAAOC,GACfzB,EAAa,KAEbA,EAAauB,EAAMC,OAAOC,KAGN,MAApBF,EAAMC,OAAOC,GACfrB,IAC6B,MAApBmB,EAAMC,OAAOC,IACtBlB,KAOAkB,GAAIP,EACJF,UAAS,iBA7BPG,EACK,WAELC,EACK,cAELC,EACK,kBADT,IAyBGH,KChBQQ,EApBE,WACf,IACQC,EADYC,EAAQ,IACpBD,QAER,OADAE,QAAQC,IAAIH,GAEV,yBAAKX,UAAU,qBACZW,EAAQI,KAAI,SAAAC,GACX,OACE,kBAAC,EAAD,CACEd,WAAYc,EAAOC,KACnBd,eAAgBa,EAAOE,iBACvBd,YAAaY,EAAOG,cACpBd,WAAYW,EAAOI,oBCFhBC,EATI,WACjB,OACE,yBAAKrB,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCMSsB,EAVH,WACV,OACE,yBAAKtB,UAAU,OACb,kBAACtB,EAAA,EAAD,KACE,kBAAC,EAAD,SCGY6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b9041c28.chunk.js","sourcesContent":["import React, { createContext, Component } from \"react\";\n\nexport const CalculatorContext = createContext();\n\nclass CalculatorContextProvider extends Component {\n  state = { \n    currentFormula: '',\n    resultArray: []\n  }\n\n  addToFormula = (op) => {\n    this.setState(prevState => {\n      return {currentFormula: prevState.currentFormula + op}\n    })\n  }\n\n  clearFormula = () => {\n    this.setState({\n      currentFormula: ''\n    })\n  }\n\n  setCurrentFormula = (value) => {\n    this.setState({\n      currentFormula: value\n    })\n  }\n\n  evaluateFormula = () => {\n    this.setState(prevState => {\n      return {currentFormula: eval(prevState.currentFormula)}\n    })\n  }\n  render() { \n    return ( \n      <CalculatorContext.Provider value={{...this.state, addToFormula: this.addToFormula, clearFormula:this.clearFormula, evaluateFormula: this.evaluateFormula}}>\n        {this.props.children}\n      </CalculatorContext.Provider>\n     );\n  }\n}\n \nexport default CalculatorContextProvider;\n","import React, { useContext } from \"react\";\nimport \"./Display.css\";\nimport { CalculatorContext } from \"../../contexts/CalculatorContext\";\n\nconst Display = () => {\n  const { currentFormula } = useContext(CalculatorContext);\n  return (\n    <div className=\"display\">\n      <p>{currentFormula}</p>\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { useContext } from \"react\";\nimport \"./Button.css\";\nimport { CalculatorContext } from \"../../../../contexts/CalculatorContext\";\n\nconst Button = ({ buttonName, buttonOperator, buttonClear, buttonZero }) => {\n  const { addToFormula, clearFormula, evaluateFormula } = useContext(\n    CalculatorContext\n  );\n  const handleClass = () => {\n    if (buttonOperator) {\n      return \"opButton\";\n    }\n    if (buttonClear) {\n      return \"clearButton\";\n    }\n    if (buttonZero) {\n      return \"zeroButton\";\n    }\n  };\n  const handleClick = event => {\n    if (event.target.id !== \"=\" && event.target.id !== \"C\") {\n      if (event.target.id === \"รท\") {\n        addToFormula(\"/\");\n      } else {\n        addToFormula(event.target.id);\n      }\n    }\n    if (event.target.id === \"C\") {\n      clearFormula();\n    } else if (event.target.id === \"=\") {\n      evaluateFormula();\n    }\n  };\n  // eslint-disable-next-line prefer-template\n  return (\n    <div\n      onClick={handleClick}\n      id={buttonName}\n      className={`button ${handleClass()}`}\n    >\n      {buttonName}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"./Controls.css\";\nimport Button from \"./Button/Button\";\n\nconst Controls = () => {\n  const buttonsJSON = require(\"./buttons.json\");\n  const { buttons } = buttonsJSON;\n  console.log(buttons);\n  return (\n    <div className=\"controlsContainer\">\n      {buttons.map(button => {\n        return (\n          <Button\n            buttonName={button.name}\n            buttonOperator={button.isOperatorButton}\n            buttonClear={button.isClearButton}\n            buttonZero={button.isZeroButton}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from \"react\";\nimport \"./Calculator.css\";\nimport Display from \"./CalculatorComponents/Display\";\nimport Controls from \"./CalculatorComponents/Controls/Controls\";\n\nconst Calculator = () => {\n  return (\n    <div className=\"calculatorBody\">\n      <Display />\n      <Controls />\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\nimport CalculatorContextProvider from \"./contexts/CalculatorContext\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <CalculatorContextProvider>\n        <Calculator />\n      </CalculatorContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}